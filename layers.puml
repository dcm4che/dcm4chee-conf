@startuml



title Configuration framework - Layers


dc -- json
Interface Configuration

package "JSON conversion \n <size:10>Handles converting configuration nodes (i.e. json-like structures) to type-safe configurable instances and vice-versa.</size>" as json {
Class DefaultBeanVitalizer
Interface ConfigTypeAdapter
}

package "Dicom Configuration" as dc {

DicomConfiguration <|- CommonDicomConfigurationWithHL7
Interface DicomConfiguration

Class CommonDicomConfigurationWithHL7
Class TCConfiguration
Class Device

CommonDicomConfigurationWithHL7 - TCConfiguration
CommonDicomConfigurationWithHL7 -- Device
}



newpage

Interface Configuration
package "Low-level configuration" as ejb {

    Configuration <|- ConfigurationEJB

    package "Defaults filter \n <size:10>Filters out default values before storing / inserts default values when loading</size>" as df {
       class DefaultsAndNullFilterDecorator
    }

    package "Hash-based optimistic locking \n <size:10>Prevents conflicting concurrent changes and preserves independent concurrent changes</size>" as ol {
       class HashBasedOptimisticLockingConfiguration
    }

    package "Extension merging \n <size:10>Preserves existing extensions from being removed</size>" as em {
       class ExtensionMergingConfiguration
    }

    package "Infinispan reference index \n <size:10>Enables fast lookup by uuid </size>" as irf {
       class InfinispanDicomReferenceIndexingDecorator
    }
    package "Infinispan cache \n <size:10>Caches the whole configuration</size>" as ic {
       class InfinispanCachingConfigurationDecorator
    }

    package "Storage \n <size:10>Persistent storage</size>" as st {
       class SemiSerializedDBConfigStorage
       class CdiSingleJsonFileConfigurationStorage
    }

    package "[pre-commit] Integrity check \n <size:10>Prevents breaking changes from being committed</size>" as ichk {
        Class ConfigurationIntegrityCheck
    }

    package "[post-commit] Notifications \n <size:10>Triggers update notifications to other components</size>" as notif {
        Class ConfigNotificationDecorator
    }

    class ConfigurationEJB
    note right of ConfigurationEJB: Assembles the decorator stack; \nEnforces locking, transaction demarcation, pre/post-commit hooks

    ConfigurationEJB .. df
    st .. ichk
    st .. notif

    df .. ol
    ol .. em
    em .. irf
    irf .. ic
    ic ..st



}



'
'rectangle ConfigurationEJB {
'}
'
'rectangle upgrade as "Upgrade engine === d"
'
'rectangle "DicomConfiguration" {
'}
'
'rectangle "Defaults filter" {
'}
'rectangle "Hash-based optimistic locking" {
'}
'rectangle "Extension merging" {
'}
'rectangle "Infinispan reference index" {
'}
'rectangle "Infinispan cache" {
'}
'rectangle "Storage (DB, json file)" {
'}
'
'rectangle "(pre-commit)Integrity check" {
'}
'rectangle "(post-commit)Notifications" {
'}

@enduml